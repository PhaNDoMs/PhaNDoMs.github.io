---
title: Pentestit Test Lab v10 WriteUp - Site Token
categories: ['CTF WriteUp']
tags: ['Hacking']
---



# Introduction/Info
First off I need to mention that for this token I dont have many notes anymore since I deleted the original Kali VM that I used. There may be things missing in this writeup and I apologize for that. Ill try to recall my memory and recover my notes as best as I can. Have fun reading!



# Getting the token


## Gathering Info
In the previous story/post ["Pentestit Test Lab v10 WriteUp — Mail Token"](https://domischlegel.github.io/ctf%20writeup/Pentestittestlabv10writeupmailtoken/) we found out that the Blog was hosted on 192.168.101.9:443. Thats also where we found the employee name which we used to bruteforce.

One of the tools I always use to gather some info on websites is “dirb”, which is used to bruteforce existing directories, subdirectories and hidden sites on a website. After running this tool, I found the following link which leads to the login for the admin-page of the blog:

{% highlight shell %}
http://192.168.101.9:443/admin/login.php
{% endhighlight %}

Bruteforcing the users we already had was not successfull. Lets continue somewhere else.

Going further through the blog site I noticed the following URL when I clicked on a post:

{% highlight %}
http://192.168.101.9:443/post.php?id=1
{% endhighlight %}

Parameters like this “id” can usually be used to inject SQL code (called SQL Injection) which then will be executed if the input is not sanitized correctly. Lets try that!


## SQL Injection on parameter “id”

I tried a very long time but since I wasnt that experienced with SQL Injections my requests always got blocked by a WAF (Web-Application Firewall) until I found some evasion techniques. One of them was to use both upper and lower case letters. When I tried this, I successfully executed my injection without getting blocked by the WAF!

Now thats the point where I lost the info on how I did it step by step but I have the link which I used to dump the username and password hash of a table called “site.users”. With the following link I successfully exploited the SQL Injection vulnerability:

{% highlight %}
http://192.168.101.9:443/post.php?id=%27%29+UniOn+SeLecT+1,GroUp_ConCaT%28useRnAMe,0x20,paSswOrD%29+FrOm+site.users%23
{% endhighlight %}

This gave me the following User and PW hash:

{% highlight %}
e.lindsey $1$w9aURG9k$Wf1VIpv9VET3v3VWZ4YD8.
{% endhighlight %}


## Cracking the hash

I used hash-identifier to identify the type of the hash and then cracked it using the wordlist “rockyou”. The hack got successfully cracked and gave me the password “lindsey123” for the user e.lindsey.
Logging into admin

Remember in the recon phase we found an admin login page?

{% highlight %}
http://192.168.101.9:443/admin/login.php
{% endhighlight %}

Logging in with our new user “e.lindsey” worked and the token was right there! Task done!



# Key takeaways

Here Ill try to list some important things that you can learn from this token:

* Sanitize user input/links to avoid SQL injection vulnerability
* Use strong passwords so hashes cannot be cracked easily
* salt passwords before hashing to make hash-cracking even more difficult
* If possible, make admin sites only available/reachable from internal networks
